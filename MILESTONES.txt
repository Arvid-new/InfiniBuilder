Names: Andrei Cozma and Hunter Price
CS307 Final Project - JavaFX Game & Game Library
Last Updated File: 03/12/2020

TO-DO LIST
** TODO- Assign priority to each one of these items **
** TODO- Add milestones to Trello;
Features:
- Add customizable HUD pane/group overlay to screen with health, ...
Player:
- Add health parameter in PlayerUtil with a changeable max limit
- Falling from a certain height will decrease the health by a changeable amount
- Health regenerates on it's own at a predefined rate only when stamina is at 100%
- Add stamina parameter in PlayerUtil with a changeable max limit
- Add ability to run (increase movement speed while in running mode)
- Decrease stamina and log while running. When stamina reaches 0, stop running.
- Only be able to start running again when stamina is above a variable that can be set (runStaminaTreshold) (ex: 75% full)
- Regenerate the stamina at a certain rate while walking
- Regenerate the stamina at a higher rate then standing
- Eventually add hunger system
- Be able to add all these parameters to the HUD
- Add basic inventory system & add to hud
- Create ability to pick up items and add them to your inventory.
- Add the ability to 'equip' items from your inventory (weapons, armor, etc)
- Add the ability to place the item back into the environment
Camera:
- Implement Depth Checking on drawn objects so that they are rendered with the correct priority
Movement
- while in air, your current speed gets decreased by a certain gravity per second squared (-9.81/m/s/s) to simulate gravity
- Add collision checking with the environment (JavaFX collision implementation or self created implementation?)
- Add collision checking with all the child members of the environment
Environment:
- Implement basic terrain generation using Simplex Noise
- Make Simplex noise terrain generation configurable
- Implement basic terrain generation using PerlinNoise
- Make PerlinNoise terrain generation configurable
- Add different structures on the randomly generated environment (randomly generate?)
- Add ability to seed the PerlinNoise and Simplex Noise generators in MainExecution (based on given seed)
Objects:
- Add ability to spawn object into the environment
- When placing an object into the environment we have direct access to it's parameters (position, scale, rotation, color, material, physics, etc) from Main Execution
- Add ability to set a physics system to each object created which determines whether the current object will be affected by the PhysicsUtil class or not
- Add variable in object that tells whether that object is destroyable or not
- If the object is destroyable, be able to define the object's health till it is destroyed
- Add variable in object that tells whether we can pick up the object from the environment and place it in the inventory
- For certain items (such as weapons), be able to set a damageMultiplier for the damage that is dealt when using that item
- Certain objects can increase or decrease your stats (health, stamina, etc)
Lighting:
- Add the ability to alter the different parameters and modes of Ambient Light
- Create a Day-Night cycle by using different Ambient Light colors and intensities
- create setSkyBox function in EnvironmentUtil in which you'd be able to set a SkyBoxUtil object
- SkyBoxUtil object handles the ambient light, colors of sky, day-night cycle, etc
- SkyBoxUtil has the ability to add children to their group in order to add the Sun and Moon into the sky (potentially stars too)
- Implement SkyBox for the day-night cycle, and being able to change the sky's colors statically or in a gradient from side to side
- Potentially even use a "Sky Material" for the sky box
- The Sun and Moon move around the player using trigonometry to simulate rotation of the day-night cycle
- Ensure the ability to modify the length of day/night as well as the colors of the sky during that time
- Decrease the intensity of the ambient light gradually from noon to night (using sin/cos)
Menu:
- Improve menu to be more modular and OOP
- Move Main Menu cube to the right, make it bigger, make it rotate
- set physics function with the physics class part of the object class.
    This affects all members of the environment that should be affected by physics


Completed List:
- Fixed Ambient Light problem when returning from the main menu
- Added Fly Mode by pressing F;
- Added ability to jump a specified height
- Implemented Trig logic in order to move in different X and Z coordinates based on the current rotation of the camera
- Basic movement physics to player (jumping, falling, etc)
- Moving and rotating the camera object instead of the terrain
- Implemented PerlinNoise Algorithm helper functions and tested functionality to ensure it will work with terrain generation
- Added SimplexNoise library to use in the future for terrain generation
- Basic generate terrain functions in EnvironmentUtil
- map mouse movement. Find deltaX and deltaY on mouse movement to find mouse acceleration. Use this to find the amount the camera/player needs to rotate
- Implemented an ObjectBuilder parent class which we can create different types of objects we can add to the environment
- Added simple terrain generation based on tiling cubes and being able to customize the tile range and width/height/depth
- Added classes for WindowUtil,EnvironmentUtil,PlayerUtil,ControlsUtil,CameraUtil,MenuUtil,MaterialsUtil
- Each one of the component classes are passed in a context through their constructor from which we are able to directly control different aspects of the game from a different class
- Wrote MainExecution in a way to which to use the classes for creating a Window, Player, Environment etc.
- Each of the EnvironmentUtil,PlayerUtil,ControlsUtil,CameraUtil,MenuUtil,MaterialsUtil are implemented to be submodules of the window object
- The WindowUtil object now controls all aspects of the game, such as creating menus, displaying them, creating a player, camera, environment, as well as customizing them
- Added functionality in ControlsUtil for handling mouse movement, mouse presses and releases, as well as key presses and releases
- Added the ability to tell which buttons are pressed at the same time in order to perform multiple interactions at once for player movement.
- Added a Materials class which contains static references to different Materials to be used when rendering different objects on the scene
- Implemented basic movement functions in the PlayerUtil class which uses input from the ControlsUtil class.
- Added a PlayerUtil class which tracks different parameters related to the player, including different movement speeds, current position coordinates, etc
- The EnvironmentUtil class was added to handle Ambient ligting set on the environment, as well as an addMember function to drop an ObjectBuilder object into the environemnt.

